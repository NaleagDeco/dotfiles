# -*- mode: org; coding: utf-8; -*-
* Gaelan's Emacs Config
  This is my emacs config; there are many like it, but this one is mine.
** Preamble
*** File header
    There are little things I can do to make my life easier working with the tangled file.

    For one thing, I wil definitely want to enable lexical binding.
    For another thing, I can set the file to be opened in read-only mode in case I mistakenly try to edit the generated elisp file rather than this org file.
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;;; init.el --- Gaelan's Emacs config -*- lexical-binding: t; eval: (view-mode 1) -*-
    #+END_SRC
** Initialization
   This is low-level stuff that sets up my emacs environment. It's usually not config but
   tweaking the environment to support my configuration.
*** Version Sentinal
    I am not sure if this config will work with older versions of emacs, so I'll abort if the running version of emacs is older than a known version.
 #+BEGIN_SRC emacs-lisp :tangle yes
   (let ((minver "26.1"))
     (when (version< emacs-version minver)
       (error "Your Emacs is too old -- this config requires v%s or higher" minver)))
 #+END_SRC
*** Garbage Collection threshold tweak
    I saw a config where the author tweaked garbage collection thresholds for speed during initialization, presuambly to minimize GC overhead at startup.
    When emacs has finished initalizing, it runs a hook we've set up to restore a more aggressive threshold.
    I have no idea if this is a good idea or not, but for now I will trust them.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (let ((normal-gc-cons-threshold (* 20 1024 1024))
	    (init-gc-cons-threshold (* 128 1024 1024)))
	(setq gc-cons-threshold init-gc-cons-threshold)
	(add-hook 'emacs-startup-hook
		  (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))
    #+END_SRC
    
*** Set location of custom file
    Emacs by default manages some forms for variables and faces and places them at the end of =init.el=. Since my =init.el= is generated, this would be difficult to manage.
    I can tell Emacs to use a different location for these, which will not be checked into source control or regenerated and Emacs can manage it to its heart's content.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    #+END_SRC
*** Who am I?
    My name and email will be used by things like git and email plugins and so on.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq user-full-name "Gaelan D'costa"
	    user-mail-address "gdcosta@gmail.com")
    #+END_SRC
*** Enable Common Lisp language features
    We'll need to load common-lisp functionality, but since we're only using macros, we can restrict it to the compliation step to monimize runtime bloat.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (eval-when-compile
	(require 'cl-lib))
    #+END_SRC
** Some helpful constants
    There are some constants I will refer to often; this is a good place to put them.
    These will often be things like quickly getting the operating system and user-defined directories and such.
 #+BEGIN_SRC emacs-lisp :tangle yes
   (defconst gaelan/*is-osx* (eq system-type 'darwin)
     "Is this operating system OSX?")
   (defconst gaelan/*is-linux* (eq system-type 'gnu/linux)
     "Is this operating system Linux?")
 #+END_SRC
** Package Management
   From this point out, we're likely going to be installing and configuration packages.
   The first thing we should do is configure our packaging system

   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'package)
   #+END_SRC
*** Enable package sources
    By default, emacs' package manager only grabs packages from GNU's ELPA package library, which has a very tiny selection of packages.
    We are going to add the following additional reposities:
    - melpa-stable :: Stable versions of almost every commonly-used package
    - melpa :: Unstable versions of almost every commonly-used package
    - org :: The repository for org mode, my favourite emacs package :)

    My understanding is that the order of repos =package-archives= does not matter, if this because a problem (i.e. the wrong versions of packages are being pulled because they exist in multiple archives) the solution is apparently to set values in =package-archive-priorities=

    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-to-list 'package-archives
		   '("melpa-stable" . "https://stable.melpa.org/packages/"))
      (add-to-list 'package-archives
		   '("melpa" . "https://melpa.org/packages/"))
      (add-to-list 'package-archives
		   '("org" . "https://orgmode.org/elpa/"))
    #+END_SRC
*** Initialize the package subsystem
    #+BEGIN_SRC emacs-lisp :tangle yes
      (package-initialize)
    #+END_SRC
*** use-package, an easier way to manage package configuration
    While ELPA is still Emacs' package management system, it is a pretty manual process.
    Traditionally, one has to manually download the package, manually require the package in one's config, and then customize it by setting the appropriate variables and running the appropriate functions.

    This is messy if one wants to always ensure that packages are installed, or if there is a logical ordering to packages (for example a base package must be loaded and configured before additional packages extend it.
    In addition, there is a lot of repeated boilerplate around things like associating modes with file extensions or configuring key bindings for these packages.

    John Wiegley has written a nice emacs plugin to manage these via a macro, which makes reading one's intended configuration for each package a lot more compact and easier to comprehend.

    Because it is a macro, we only need to require the package when compiling the configuration file.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (eval-when-compile
	(require 'use-package))
    #+END_SRC
**** Diminish 
    Having the full name of every package displayed would clog our status line; there is a package that will appreviate the name of well-known packages to a couple of characters.
    #+BEGIN_SRC emacs-lisp :tangle yes
       (require 'diminish)
    #+END_SRC
**** Bind-key
     Since we're going to be using the =:bind= keyword to configure keybindings, we require the =bind-key= package
     #+BEGIN_SRC emacs-lisp :tangle yes
       (require 'bind-key)
     #+END_SRC

   

